# An unique identifier for the head node and workers of this cluster.
cluster_name: ray_cluster_pssr

# The maximum number of workers nodes to launch in addition to the head
# node.
max_workers: 1

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker:
    image: "yuhangsongchina/general-energy-nets:1.0"
    container_name: "ray_container"
    # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
    # if no cached version is present.
    pull_before_run: True
    run_options:   # Extra options to pass into "docker run"
        - --ulimit nofile=65536:65536
        - -p 6007:6007

    # Example of running a GPU head with CPU workers
    # head_image: "rayproject/ray-ml:latest-gpu"
    # Allow Ray to automatically detect GPUs

    # worker_image: "rayproject/ray-ml:latest-cpu"
    # worker_run_options: []

# Cloud-provider specific configuration.
provider:
    type: local
    
    head_ip: 163.1.88.197
    
    # You may need to supply a public ip for the head node if you need
    # to run `ray up` from outside of the Ray cluster's network
    # (e.g. the cluster is in an AWS VPC and you're starting ray from your laptop)
    # This is useful when debugging the local node provider with cloud VMs.
    external_head_ip: pssr.cs.ox.ac.uk
    
    worker_ips:
        - 163.1.88.158
    
    # Optional when running automatic cluster management on prem. If you use a coordinator server,
    # then you can launch multiple autoscaling clusters on the same set of machines, and the coordinator
    # will assign individual nodes to clusters as needed.
    #    coordinator_address: "<host>:<port>"

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: yuhang
    # You can comment out `ssh_private_key` if the following machines don't need a private key for SSH access to the Ray
    # cluster:
    #   (1) The machine on which `ray up` is executed.
    #   (2) The head node of the Ray cluster.
    #
    # The machine that runs ray up executes SSH commands to set up the Ray head node. The Ray head node subsequently
    # executes SSH commands to set up the Ray worker nodes. When you run ray up, ssh credentials sitting on the ray up
    # machine are copied to the head node -- internally, the ssh key is added to the list of file mounts to rsync to head node.
    ssh_private_key: ~/.ssh/id_rsa

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
# Typically, min_workers == max_workers == len(worker_ips).
# This field is optional.
min_workers: 1


# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH. E.g. you could save your conda env to an environment.yaml file, mount
# that directory to all nodes and call `conda -n my_env -f /path1/on/remote/machine/environment.yaml`. In this
# example paths on all nodes must be the same (so that conda can be called always with the same argument)
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude:
    - "**/.git"
    - "**/.git/**"
    # following items mataches the .gitignore file in the RESULTS_DIR
    # experiment_state and basic-variant-state should be synced so that one can restore the experiment or Tuner
    # - "*/experiment_state*.json"
    # - "*/basic-variant-state*.json"
    - "*/*/result.json"
    - "*/*/.data"
    - "*/.tmp_checkpoint"

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter:
    - ".gitignore"

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []

# Using Amazon EFS
# 
# To utilize Amazon EFS in the Ray cluster, you will need to install some additional utilities and mount the EFS
# in setup_commands. Note that these instructions only work if you are using the Ray cluster launcher on AWS.
# 
# Note You need to replace the {{FileSystemId}} with your own EFS ID before using the config.
# You may also need to modify the SecurityGroupIds for the head and worker nodes in the config file.
# setup_commands:
#     - sudo mount -t efs fs-067b482bea4364f9c:/ efs;
#         sudo chmod 777 efs;

# A list of commands to run to set up nodes. 
# These commands will always run on the head and worker nodes and will be merged with head setup commands for head and with worker setup commands for workers.
setup_commands:
    # set environment variables (if not already there)
    # error tcp_server_posix.cc:213]    Failed accept4: Too many open files
    # # refer to: https://discuss.ray.io/t/setting-ulimits-on-ec2-instances/590
    - if ! grep -q "ulimit -n 65535" ~/.bashrc; then echo "ulimit -n 65535" >> ~/.bashrc; fi
    # - if ! grep -q "AUTOSCALER_NODE_START_WAIT_S" ~/.bashrc; then echo "export AUTOSCALER_NODE_START_WAIT_S=31536000" >> ~/.bashrc; fi

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - pip uninstall ray -y && pip install -U "ray[all] @ https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-3.0.0.dev0-cp37-cp37m-manylinux2014_x86_64.whl"
    - ray --version
    - ray stop
    - ulimit -c unlimited && ray start --autoscaling-config=~/ray_bootstrap_config.yaml --head --port=4853 --node-manager-port 5235 --object-manager-port 7434 --dashboard-agent-grpc-port 7324 --dashboard-agent-listen-port 2453 --metrics-export-port 4673 --min-worker-port 10002 --max-worker-port 19999 --dashboard-port 6008

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - pip uninstall ray -y && pip install -U "ray[all] @ https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-3.0.0.dev0-cp37-cp37m-manylinux2014_x86_64.whl"
    - ray --version
    - ray stop
    - ray start --address=$RAY_HEAD_IP:4853 --node-manager-port 5235 --object-manager-port 7434 --dashboard-agent-grpc-port 7324 --dashboard-agent-listen-port 2453 --metrics-export-port 4673 --min-worker-port 10002 --max-worker-port 19999
